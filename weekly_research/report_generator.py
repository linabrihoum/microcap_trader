"""
Report generation module for creating daily trading reports.
"""

import pandas as pd
from datetime import datetime
from config import DAILY_REPORT_FILE, DATE_FORMAT


class ReportGenerator:
    """Generates daily trading reports in Markdown format."""
    
    def __init__(self):
        self.report_file = DAILY_REPORT_FILE
    
    def generate_daily_report(self, portfolio_df, candidates_df):
        """Generate a comprehensive daily report."""
        today = datetime.now().strftime(DATE_FORMAT)
        
        report = f"""# Microcap Trading Daily Report
**Date:** {today}

## Portfolio Summary

"""
        
        # Portfolio summary
        if len(portfolio_df) > 0:
            total_value = (portfolio_df['shares'] * portfolio_df['current_price']).sum()
            total_pnl = portfolio_df['pnl'].sum()
            total_invested = (portfolio_df['shares'] * portfolio_df['buy_price']).sum()
            pnl_percentage = (total_pnl / total_invested * 100) if total_invested > 0 else 0
            
            report += f"""
- **Total Portfolio Value:** ${total_value:,.2f}
- **Total P&L:** ${total_pnl:,.2f} ({pnl_percentage:+.2f}%)
- **Total Invested:** ${total_invested:,.2f}
- **Number of Positions:** {len(portfolio_df)}

### Portfolio Holdings

| Symbol | Shares | Buy Price | Current Price | P&L | P&L % |
|--------|--------|-----------|---------------|-----|-------|
"""
            
            for _, row in portfolio_df.iterrows():
                pnl_pct = ((row['current_price'] - row['buy_price']) / row['buy_price'] * 100)
                report += f"| {row['symbol']} | {row['shares']:,.0f} | ${row['buy_price']:.2f} | ${row['current_price']:.2f} | ${row['pnl']:,.2f} | {pnl_pct:+.2f}% |\n"
            
            # Top gainers and losers
            portfolio_df_sorted = portfolio_df.sort_values('pnl', ascending=False)
            
            report += f"""

### Top Gainers
"""
            for _, row in portfolio_df_sorted.head(3).iterrows():
                pnl_pct = ((row['current_price'] - row['buy_price']) / row['buy_price'] * 100)
                report += f"- **{row['symbol']}**: ${row['pnl']:,.2f} ({pnl_pct:+.2f}%)\n"
            
            report += f"""

### Top Losers
"""
            for _, row in portfolio_df_sorted.tail(3).iterrows():
                pnl_pct = ((row['current_price'] - row['buy_price']) / row['buy_price'] * 100)
                report += f"- **{row['symbol']}**: ${row['pnl']:,.2f} ({pnl_pct:+.2f}%)\n"
        else:
            report += "No positions in portfolio.\n"
        
        # Candidates analysis
        report += f"""

## Microcap Candidates Analysis

"""
        
        if len(candidates_df) > 0:
            report += f"**Total Candidates Analyzed:** {len(candidates_df)}\n\n"
            
            # Top candidates by 5-day performance
            top_candidates = candidates_df.head(10)
            
            report += f"""

### Top Candidates (5-Day Performance)

| Symbol | Market Cap (B) | Price | 1D Change | 5D Change | Avg Volume (K) |
|--------|----------------|-------|-----------|-----------|----------------|
"""
            
            for _, row in top_candidates.iterrows():
                report += f"| {row['symbol']} | ${row['market_cap']:.2f}B | ${row['price']:.2f} | {row['pct_change_1d']:+.2f}% | {row['pct_change_5d']:+.2f}% | {row['avg_volume']:,.0f} |\n"
            
            # Volume leaders
            volume_leaders = candidates_df.nlargest(5, 'avg_volume')
            
            report += f"""

### High Volume Candidates

| Symbol | Market Cap (B) | Price | Avg Volume (K) |
|--------|----------------|-------|----------------|
"""
            
            for _, row in volume_leaders.iterrows():
                report += f"| {row['symbol']} | ${row['market_cap']:.2f}B | ${row['price']:.2f} | {row['avg_volume']:,.0f} |\n"
        else:
            report += "No candidates found.\n"
        
        # Market insights
        report += f"""

## Market Insights

- **Analysis Date:** {today}
- **Market Cap Threshold:** $2B
- **Minimum Volume:** 100K shares
- **Candidates Analyzed:** {len(candidates_df)}

### Recommendations

1. **High Momentum:** Focus on stocks with strong 5-day performance
2. **Volume Analysis:** Consider stocks with increasing volume
3. **Risk Management:** Diversify across different sectors
4. **Entry Timing:** Consider buying on pullbacks for strong performers

---
*Report generated by Microcap Trader System*
"""
        
        # Save report
        try:
            with open(self.report_file, 'w', encoding='utf-8') as f:
                f.write(report)
            return True
        except Exception as e:
            print(f"Error saving report: {e}")
            return False
    
    def generate_portfolio_summary(self, portfolio_df):
        """Generate a quick portfolio summary."""
        if len(portfolio_df) == 0:
            return "No positions in portfolio."
        
        total_value = (portfolio_df['shares'] * portfolio_df['current_price']).sum()
        total_pnl = portfolio_df['pnl'].sum()
        total_invested = (portfolio_df['shares'] * portfolio_df['buy_price']).sum()
        pnl_percentage = (total_pnl / total_invested * 100) if total_invested > 0 else 0
        
        summary = f"""
Portfolio Summary:
- Total Value: ${total_value:,.2f}
- Total P&L: ${total_pnl:,.2f} ({pnl_percentage:+.2f}%)
- Positions: {len(portfolio_df)}
"""
        return summary 